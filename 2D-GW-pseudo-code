# Grid level connectivity
1  g1 <---> g2
2  g1 <---> g3
3  g1 <---> g4
4  g1 <---> g5
5  g1 <---> g6
6  g1 <---> g7
7  g1 <---> g8


integer  :: iconn                                        ! connection loop indices
integer  :: nlevbed                                      ! number of layers to bedrock

real(r8) :: delta_z_zwt
real(r8) :: hk(bounds%begc:bounds%endc,1:nlevgrnd)        ! hydraulic conductivity [mm h2o/s]
real(r8) :: dhkdw(bounds%begc:bounds%endc,1:nlevgrnd)     ! d(hk)/d(vol_liq)
real(r8) :: amx(bounds%begc:bounds%endc,1:nlevgrnd+1)     ! "a" left off diagonal of tridiagonal matrix
# Setup connections
use Connection_module, only :: connection_set_type
type (connection_set_type) :: conn
!currently assume the connections are the same for all layers
nconn=endc-begc
allocate(conn%grid_id_up(nconn))
allocate(conn%grid_id_dn(nconn))
allocate(conn%area(nconn))
allocate(conn%dist(nconn))

do iconn = 1,nconn
  g = begg(iconn)
  conn%grid_id_up(iconn) = g    !... Step-2: Eventually will need to read from surface dataset
  conn%grid_id_dn(iconn) = g+1  !...         There is already some code that we will be able to
                                !            use to fill this data structure
enddo

#
! loop over connections: NOT loop over grid cells
!do c = begc, endc
do iconn = 1:nconn
 do j = 1, nlev
	  qflx_lateral(iconn,j) = 0._r8
  endo
enddo
do iconn = 1, nconn
	grid_id_up = conn(iconn)%grid_up; !g1
	grid_id_dn = conn(iconn)%grid_dn; !g2
	
	col_id_up = get_natveg_column_id(grid_id_up,col_id)   
	col_id_dn = get_natveg_column_id(grid_id_dn,col_id)
    do j = 1, nlev
        ! up --> dn
	!dzq    = (zq(c,j)-zq(c,j-1))
	!   num    = (smp(c,j)-smp(c,j-1)) - dzq
        !     qin(c,j)    = -hk(c,j-1)*num/den
	
	!dzq    = (zq(c,j+1)-zq(c,j))
        !num    = (smp(c,j+1)-smp(c,j)) - dzq
        !    qout(c,j)   = -hk(c,j)*num/den
	 dz=    ! 
	!hydraulic conductivity hkl(iconn,j) is
        !the lateral hydraulic conductivity is calculated using the geometric mean of the 
        !neighbouring lateral cells and is approximated as 1000 times of the vertical hydraulic conductivity
             s1 = 0.5_r8*(h2osoi_vol(col_id_up,j) + h2osoi_vol(col_id_dn,j))) / &
                    (0.5_r8*(watsat(col_id_up,j)+watsat(col_id_dn,j)))
         
            s1 = min(1._r8, s1)
	    bswl = bsw(c,j)+bsw(c,j)
            s2 = sqrt(hksat(col_id_up,j), hksat(col_id_dn,j))*s1**(2._r8*bsw(c,j)+2._r8)

            ! replace fracice with impedance factor, as in zhao 97,99
            !if (origflag == 1) then
            !   imped(c,j)=(1._r8-0.5_r8*(fracice(c,j)+fracice(c,min(nlevsoi, j+1))))
            !else
               imped(iconn,j)=10._r8**(-e_ice*(0.5_r8*(icefrac(col_id_up,j)+icefrac(col_id_dn,j))))
            !endif
            hkl(iconn,j) = imped(c,j)*s1*s2*1000.0_r8
            qflx_up_to_dn = hkl(iconn,j)(smp(col_id_up,j) - smp(col_id_dn,j) + dzl) ! dzl is the height difference between two neighbouring lateral cells
            qflx_lateral(col_id_up,j) = qflx_lateral(col_id_up,j) - qflx_up_to_dn
            qflx_lateral(col_id_dn,j) = qflx_lateral(col_id_dn,j) + qflx_up_to_dn
    enddo
enddo

!in soilwater_zengdecker2009.
!Assembly of ‘a’, ‘b’, ‘c’, ‘r’
! in current setup, if we assume the lateral flux changes slowly during one time
!step, we can ignore the derivative term in equation 2.7.1 and 2.7.2 for lateral flux
!such that it can be considered as source/sink term. In this setup, the tridiagonal equation at layer k
!can be formed as below:
! r_j = a_j [d wat_j-1] + b_j [d wat_j] + c_j [d wat_j+1]


do iconn = 1, nconn
	grid_id_up = conn(iconn)%grid_up; !g1
	grid_id_dn = conn(iconn)%grid_dn; !g2
	
	col_id_up = get_natveg_column_id(grid_id_up,col_id)   
	col_id_dn = get_natveg_column_id(grid_id_dn,col_id)
    do j = 1, nlev
    
      do fc = 1, num_hydrologyc
         c = filter_hydrologyc(fc)
         nlevbed = nlev2bed(c)
         do j = 1, nlevbed
            ! compute hydraulic conductivity based on liquid water content only

            if (origflag == 1) then
               s1 = 0.5_r8*(h2osoi_vol(c,j) + h2osoi_vol(c,min(nlevsoi, j+1))) / &
                    (0.5_r8*(watsat(c,j)+watsat(c,min(nlevsoi, j+1))))
         
            s1 = min(1._r8, s1)
            s2 = hksat(c,j)*s1**(2._r8*bsw(c,j)+2._r8)

            ! replace fracice with impedance factor, as in zhao 97,99
            if (origflag == 1) then
               imped(c,j)=(1._r8-0.5_r8*(fracice(c,j)+fracice(c,min(nlevsoi, j+1))))
            else
               imped(c,j)=10._r8**(-e_ice*(0.5_r8*(icefrac(c,j)+icefrac(c,min(nlevsoi, j+1)))))
            endif
            hkl(c,j) = imped(c,j)*s1*s2
            dhkdw(c,j) = imped(c,j)*(2._r8*bsw(c,j)+3._r8)*s2* &
                 (1._r8/(watsat(c,j)+watsat(c,min(nlevsoi, j+1))))

           

         end do
      end do
!
!
! layer j=1
dx = 1000; !hard coding dx dy for now
dy = 1000;

 do fc = 1, num_hydrologyc
         c = filter_hydrologyc(fc)
         qin(c,j)    = qflx_infl(c)
         den    = (zmm(c,j+1)-zmm(c,j))
         dzq    = (zq(c,j+1)-zq(c,j))
         num    = (smp(c,j+1)-smp(c,j)) - dzq
         qout(c,j)   = -hk(c,j)*num/den
         dqodw1(c,j) = -(-hk(c,j)*dsmpdw(c,j)   + num*dhkdw(c,j))/den
         dqodw2(c,j) = -( hk(c,j)*dsmpdw(c,j+1) + num*dhkdw(c,j))/den
         rmx(c,j) =  qin(c,j) - qout(c,j) - qflx_rootsoi_col(c,j) + qflx_lateral(c,j)* dz(c,j) / dx
         amx(c,j) =  0._r8
         bmx(c,j) =  dzmm(c,j)*(sdamp+1._r8/dtime) + dqodw1(c,j)
         cmx(c,j) =  dqodw2(c,j)
end do
    
!
do fc = 1, num_hydrologyc
  c = filter_hydrologyc(fc)
  do j = 2, nlevbed
  	 r += (+/-) qflx_lateral(c,j)
  enddo
enddo

! Node j=1 (top)

      j = 1
      do fc = 1, num_hydrologyc
         c = filter_hydrologyc(fc)
         qin(c,j)    = qflx_infl(c)
         den    = (zmm(c,j+1)-zmm(c,j))
         dzq    = (zq(c,j+1)-zq(c,j))
         num    = (smp(c,j+1)-smp(c,j)) - dzq
         qout(c,j)   = -hk(c,j)*num/den
         dqodw1(c,j) = -(-hk(c,j)*dsmpdw(c,j)   + num*dhkdw(c,j))/den
         dqodw2(c,j) = -( hk(c,j)*dsmpdw(c,j+1) + num*dhkdw(c,j))/den
         rmx(c,j) =  qin(c,j) - qout(c,j) - qflx_rootsoi_col(c,j) + qflx_lateral(c,j)* dz(c,j) / dx
         amx(c,j) =  0._r8
         bmx(c,j) =  dzmm(c,j)*(sdamp+1._r8/dtime) + dqodw1(c,j)
         cmx(c,j) =  dqodw2(c,j)
      end do

      ! Nodes j=2 to j=nlevsoi-1

      do fc = 1, num_hydrologyc
         c = filter_hydrologyc(fc)
         nlevbed = nlev2bed(c)
         do j = 2, nlevbed - 1
            den    = (zmm(c,j) - zmm(c,j-1))
            dzq    = (zq(c,j)-zq(c,j-1))
            num    = (smp(c,j)-smp(c,j-1)) - dzq
            qin(c,j)    = -hk(c,j-1)*num/den
            dqidw0(c,j) = -(-hk(c,j-1)*dsmpdw(c,j-1) + num*dhkdw(c,j-1))/den
            dqidw1(c,j) = -( hk(c,j-1)*dsmpdw(c,j)   + num*dhkdw(c,j-1))/den
            den    = (zmm(c,j+1)-zmm(c,j))
            dzq    = (zq(c,j+1)-zq(c,j))
            num    = (smp(c,j+1)-smp(c,j)) - dzq
            qout(c,j)   = -hk(c,j)*num/den
            dqodw1(c,j) = -(-hk(c,j)*dsmpdw(c,j)   + num*dhkdw(c,j))/den
            dqodw2(c,j) = -( hk(c,j)*dsmpdw(c,j+1) + num*dhkdw(c,j))/den
            rmx(c,j)    =  qin(c,j) - qout(c,j) -  qflx_rootsoi_col(c,j) + qflx_lateral(c,j)* dz(c,j) / dx
            amx(c,j)    = -dqidw0(c,j)
            bmx(c,j)    =  dzmm(c,j)/dtime - dqidw1(c,j) + dqodw1(c,j)
            cmx(c,j)    =  dqodw2(c,j)
         end do
      end do

      ! Node j=nlevsoi (bottom)

      do fc = 1, num_hydrologyc
         c = filter_hydrologyc(fc)
         nlevbed = nlev2bed(c)
         j = nlevbed
         if(j > jwt(c)) then !water table is in soil column
            den    = (zmm(c,j) - zmm(c,j-1))
            dzq    = (zq(c,j)-zq(c,j-1))
            num    = (smp(c,j)-smp(c,j-1)) - dzq
            qin(c,j)    = -hk(c,j-1)*num/den
            dqidw0(c,j) = -(-hk(c,j-1)*dsmpdw(c,j-1) + num*dhkdw(c,j-1))/den
            dqidw1(c,j) = -( hk(c,j-1)*dsmpdw(c,j)   + num*dhkdw(c,j-1))/den
            qout(c,j)   =  0._r8
            dqodw1(c,j) =  0._r8
            rmx(c,j)    =  qin(c,j) - qout(c,j) - qflx_rootsoi_col(c,j)+qflx_lateral(c,j)* dz(c,j) / dx
            amx(c,j)    = -dqidw0(c,j)
            bmx(c,j)    =  dzmm(c,j)/dtime - dqidw1(c,j) + dqodw1(c,j)
            cmx(c,j)    =  0._r8

            ! next set up aquifer layer; hydrologically inactive
            rmx(c,j+1) = 0._r8
            amx(c,j+1) = 0._r8
            bmx(c,j+1) = dzmm(c,j+1)/dtime
            cmx(c,j+1) = 0._r8
         else ! water table is below soil column

            ! compute aquifer soil moisture as average of layer 10 and saturation
            if(origflag == 1) then
               s_node = max(0.5*(1.0_r8+h2osoi_vol(c,j)/watsat(c,j)), 0.01_r8)
            else
               s_node = max(0.5*((vwc_zwt(c)+vwc_liq(c,j))/watsat(c,j)), 0.01_r8)
            endif
            s_node = min(1.0_r8, s_node)

            ! compute smp for aquifer layer
            !call soil_water_retention_curve%soil_suction(sucsat(c,j), s_node, bsw(c,j), smp1, dsmpds)
            smp1 = -sucsat(c,j)*s_node**(-bsw(c,j))
            smp1 = max(smpmin(c), smp1)

            ! compute dsmpdw for aquifer layer
            !dsmpdw1 = dsmpds/watsat(c,j)
            dsmpdw1 = -bsw(c,j)*smp1/(s_node*watsat(c,j))

            ! first set up bottom layer of soil column
            den    = (zmm(c,j) - zmm(c,j-1))
            dzq    = (zq(c,j)-zq(c,j-1))
            num    = (smp(c,j)-smp(c,j-1)) - dzq
            qin(c,j)    = -hk(c,j-1)*num/den
            dqidw0(c,j) = -(-hk(c,j-1)*dsmpdw(c,j-1) + num*dhkdw(c,j-1))/den
            dqidw1(c,j) = -( hk(c,j-1)*dsmpdw(c,j)   + num*dhkdw(c,j-1))/den
            den    = (zmm(c,j+1)-zmm(c,j))
            dzq    = (zq(c,j+1)-zq(c,j))
            num    = (smp1-smp(c,j)) - dzq
            if (use_var_soil_thick) then
               qout(c,j) = 0._r8
               dqodw1(c,j) = 0._r8
               dqodw2(c,j) = 0._r8
            else
               qout(c,j)   = -hk(c,j)*num/den
               dqodw1(c,j) = -(-hk(c,j)*dsmpdw(c,j)   + num*dhkdw(c,j))/den
               dqodw2(c,j) = -( hk(c,j)*dsmpdw1 + num*dhkdw(c,j))/den
            end if

            rmx(c,j) =  qin(c,j) - qout(c,j) - qflx_rootsoi_col(c,j)
            amx(c,j) = -dqidw0(c,j)
            bmx(c,j) =  dzmm(c,j)/dtime - dqidw1(c,j) + dqodw1(c,j)
            cmx(c,j) =  dqodw2(c,j)

            ! next set up aquifer layer; den/num unchanged, qin=qout
            qin(c,j+1)    = qout(c,j)
            dqidw0(c,j+1) = -(-hk(c,j)*dsmpdw(c,j) + num*dhkdw(c,j))/den
            dqidw1(c,j+1) = -( hk(c,j)*dsmpdw1   + num*dhkdw(c,j))/den
            qout(c,j+1)   =  0._r8  ! zero-flow bottom boundary condition
            dqodw1(c,j+1) =  0._r8  ! zero-flow bottom boundary condition
            if (use_var_soil_thick) then
               rmx(c,j+1) = 0._r8
               amx(c,j+1) = 0._r8
               bmx(c,j+1) = dzmm(c,j+1)/dtime
               cmx(c,j+1) = 0._r8
            else
               rmx(c,j+1) =  qin(c,j+1) - qout(c,j+1)
               amx(c,j+1) = -dqidw0(c,j+1)
               bmx(c,j+1) =  dzmm(c,j+1)/dtime - dqidw1(c,j+1) + dqodw1(c,j+1)
               cmx(c,j+1) =  0._r8
            end if
         endif
      end do

! lateral hydraulic conductivity
